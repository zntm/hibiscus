// @bun
var __require=import.meta.require;import{ChannelType,SlashCommandAttachmentOption,SlashCommandBuilder,SlashCommandStringOption}from"discord.js";import{readdirSync}from"fs";import{join}from"path";import{CommandCategory,CommandMetadata}from"../class/metadata.js";var b09fd1="E:\\GitHub\\hibiscus\\build\\src\\cmd",subcommandData=new Map;readdirSync(join(b09fd1,"./terminal")).forEach(async(file)=>{let key=file.slice(0,-3);subcommandData.set(key,await import(`./terminal/${file}`))});var run=async(interaction,client)=>{if(interaction.channel?.type!==ChannelType.GuildText)return client.utils.interactionWarning(interaction,"You don't have permission to use this command!");let args=interaction.options.getString("prompt")?.split(" "),subcommand=subcommandData.get(args?.shift()??"");if(!subcommand)return client.utils.interactionWarning(interaction,"This terminal command doesn't exist!");if(!subcommand.metadata.hasUser(interaction.user.id))return client.utils.interactionWarning(interaction,"You don't have permission to use this command!");let roles=subcommand.metadata.getRoles();if(roles){if(!(await interaction.guild?.members.fetch(interaction.user.id))?.roles.cache?.every((role)=>roles.has(role.id)))return client.utils.interactionWarning(interaction,"You don't have permission to use this command!")}if(!subcommand.metadata.hasChannel(interaction.channel?.id))return client.utils.interactionWarning(interaction,"You are not in the correct channel to use this command!");subcommand.run(interaction,client,args,interaction.options.getAttachment("attachment"))},metadata=new CommandMetadata(CommandCategory.Utility,new SlashCommandBuilder().setName("terminal").setDescription("Run a hidden command (usually used as hidden commands and developer tools)").addStringOption(new SlashCommandStringOption().setName("prompt").setDescription("Set the prompt you want to run").setRequired(!0)).addAttachmentOption(new SlashCommandAttachmentOption().setName("attachment").setDescription("Send an attachment to the terminal command (optional)")));export{run,metadata};
