// @bun
var __require=import.meta.require;import{channel}from"../config.js";import{CountingSettings}from"../schema/global.js";import{TerminalMetadata}from"../class/metadata.js";var setCounter=async(message,client,counting,lastUser,number,reaction)=>{counting??={},counting.lastUser=lastUser,counting.number=number,counting.lastUpdate=new Date().getTime(),await client.db.global.update(message.guild.id,{counting}),await message.react(reaction)},resetCounter=async(message,client,counting,description)=>{await setCounter(message,client,counting,"",0,"\u274C");let embed=client.utils.embedBuilder("Counting","<:counting:1401915312680603698>",9782232).setDescription(description);await message.reply({embeds:[embed]})},run=async(message,client)=>{if(message.author.bot||message.content.length<=0)return;let userId=message.author.id,number=+message.content,data=(await client.db.global.find(message.guild.id))[0],counting=data?.counting;if(!counting){await setCounter(message,client,counting,userId,1,"\u2705");return}let settings=counting?.settings??0;if(isNaN(number)){if((settings&CountingSettings.IsNumberStrict)!==0)await resetCounter(message,client,counting,"You are not allowed to send a messsage that's not a number! Number has been reset back to 1.");return}let nextNumber=data.counting.number+1;if(number!==nextNumber){await resetCounter(message,client,counting,`That number is incorrect! The next number was **${nextNumber}**! Number has been reset back to 1.`);return}if((settings&CountingSettings.IsUserStrict)!==0&&counting.lastUser===userId){await resetCounter(message,client,counting,"You are not allowed to count multiple times in a row! Number has been reset back to 1.");return}await setCounter(message,client,counting,userId,nextNumber,nextNumber===100?"\uD83D\uDCAF":"\u2705")},info=new TerminalMetadata().addChannel(channel.counting);export{run,info};
